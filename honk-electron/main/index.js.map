{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.js    > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.DIST_ELECTRON = join(__dirname, '..')\r\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\r\nprocess.env.PUBLIC = app.isPackaged ? process.env.DIST : join(process.env.DIST_ELECTRON, '../public')\r\n\r\nimport { app, BrowserWindow, shell, ipcMain } from 'electron'\r\nimport { release } from 'os'\r\nimport { join } from 'path'\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n  app.quit()\r\n  process.exit(0)\r\n}\r\n\r\n// Remove electron security warnings\r\n// This warning only shows in development mode\r\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\r\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\r\n\r\nlet win: BrowserWindow | null = null\r\n// Here, you can also use other preload\r\nconst preload = join(__dirname, '../preload/index.js')\r\nconst url = process.env.VITE_DEV_SERVER_URL\r\nconst indexHtml = join(process.env.DIST, 'index.html')\r\n\r\nasync function createWindow() {\r\n  win = new BrowserWindow({\r\n    title: 'Main window',\r\n    icon: join(process.env.PUBLIC, 'favicon.ico'),\r\n    webPreferences: {\r\n      preload,\r\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n      // Consider using contextBridge.exposeInMainWorld\r\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (process.env.VITE_DEV_SERVER_URL) { // electron-vite-vue#298\r\n    win.loadURL(url)\r\n    // Open devTool if the app is not packaged\r\n    win.webContents.openDevTools()\r\n  } else {\r\n    win.loadFile(indexHtml)\r\n  }\r\n\r\n  // Test actively push message to the Electron-Renderer\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n  })\r\n\r\n  // Make all links open with the browser, not with the application\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    if (url.startsWith('https:')) shell.openExternal(url)\r\n    return { action: 'deny' }\r\n  })\r\n}\r\n\r\napp.whenReady().then(createWindow)\r\n\r\napp.on('window-all-closed', () => {\r\n  win = null\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\napp.on('second-instance', () => {\r\n  if (win) {\r\n    // Focus on the main window if the user tried to open another\r\n    if (win.isMinimized()) win.restore()\r\n    win.focus()\r\n  }\r\n})\r\n\r\napp.on('activate', () => {\r\n  const allWindows = BrowserWindow.getAllWindows()\r\n  if (allWindows.length) {\r\n    allWindows[0].focus()\r\n  } else {\r\n    createWindow()\r\n  }\r\n})\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle('open-win', (event, arg) => {\r\n  const childWindow = new BrowserWindow({\r\n    webPreferences: {\r\n      preload,\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (process.env.VITE_DEV_SERVER_URL) {\r\n    childWindow.loadURL(`${url}#${arg}`)\r\n  } else {\r\n    childWindow.loadFile(indexHtml, { hash: arg })\r\n  }\r\n})\r\n"],"names":["join","app","release","BrowserWindow","url","shell","ipcMain"],"mappings":";;;;AAUA,QAAQ,IAAI,gBAAgBA,KAAK,KAAA,WAAW,IAAI;AAChD,QAAQ,IAAI,OAAOA,KAAA,KAAK,QAAQ,IAAI,eAAe,SAAS;AAC5D,QAAQ,IAAI,SAASC,aAAI,aAAa,QAAQ,IAAI,OAAOD,KAAK,KAAA,QAAQ,IAAI,eAAe,WAAW;AAOpG,IAAIE,WAAU,EAAA,WAAW,KAAK;AAAGD,WAAA,IAAI,4BAA4B;AAGjE,IAAI,QAAQ,aAAa;AAAaA,WAAAA,IAAA,kBAAkBA,aAAI,QAAS,CAAA;AAErE,IAAI,CAACA,SAAAA,IAAI,6BAA6B;AACpCA,WAAA,IAAI,KAAK;AACT,UAAQ,KAAK,CAAC;AAChB;AAOA,IAAI,MAA4B;AAEhC,MAAM,UAAUD,KAAK,KAAA,WAAW,qBAAqB;AACrD,MAAM,MAAM,QAAQ,IAAI;AACxB,MAAM,YAAYA,KAAA,KAAK,QAAQ,IAAI,MAAM,YAAY;AAErD,eAAe,eAAe;AAC5B,QAAM,IAAIG,SAAAA,cAAc;AAAA,IACtB,OAAO;AAAA,IACP,MAAMH,KAAAA,KAAK,QAAQ,IAAI,QAAQ,aAAa;AAAA,IAC5C,gBAAgB;AAAA,MACd;AAAA,MAIA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACpB;AAAA,EAAA,CACD;AAEG,MAAA,QAAQ,IAAI,qBAAqB;AACnC,QAAI,QAAQ,GAAG;AAEf,QAAI,YAAY;EAAa,OACxB;AACL,QAAI,SAAS,SAAS;AAAA,EACxB;AAGI,MAAA,YAAY,GAAG,mBAAmB,MAAM;AAC1C,+BAAK,YAAY,KAAK,wBAAwB,IAAI,KAAK,EAAE;EAAgB,CAC1E;AAGD,MAAI,YAAY,qBAAqB,CAAC,EAAE,KAAAI,WAAU;AAC5CA,QAAAA,KAAI,WAAW,QAAQ;AAAGC,qBAAM,aAAaD,IAAG;AAC7C,WAAA,EAAE,QAAQ;EAAO,CACzB;AACH;AAEAH,SAAI,IAAA,UAAY,EAAA,KAAK,YAAY;AAEjCA,SAAAA,IAAI,GAAG,qBAAqB,MAAM;AAC1B,QAAA;AACN,MAAI,QAAQ,aAAa;AAAUA,aAAA,IAAI,KAAK;AAC9C,CAAC;AAEDA,SAAAA,IAAI,GAAG,mBAAmB,MAAM;AAC9B,MAAI,KAAK;AAEP,QAAI,IAAI,YAAY;AAAG,UAAI,QAAQ;AACnC,QAAI,MAAM;AAAA,EACZ;AACF,CAAC;AAEDA,SAAAA,IAAI,GAAG,YAAY,MAAM;AACjB,QAAA,aAAaE,uBAAc;AACjC,MAAI,WAAW,QAAQ;AACrB,eAAW,GAAG;EAAM,OACf;AACQ;EACf;AACF,CAAC;AAGDG,SAAA,QAAQ,OAAO,YAAY,CAAC,OAAO,QAAQ;AACnC,QAAA,cAAc,IAAIH,uBAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACpB;AAAA,EAAA,CACD;AAEG,MAAA,QAAQ,IAAI,qBAAqB;AACvB,gBAAA,QAAQ,GAAG,OAAO,KAAK;AAAA,EAAA,OAC9B;AACL,gBAAY,SAAS,WAAW,EAAE,MAAM,IAAK,CAAA;AAAA,EAC/C;AACF,CAAC;"}